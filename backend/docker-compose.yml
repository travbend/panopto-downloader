services:
  traefik:
    image: "traefik:v3.2.3"
    command:
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --providers.docker.network=${PROJECT_NAME}_frontend-network
      - --entryPoints.web.address=:80
      - --entryPoints.websecure.address=:443
      - --certificatesresolvers.myresolver.acme.tlschallenge=true
      - --certificatesresolvers.myresolver.acme.email=panoptodownloader.swizzle347@passmail.net
      - --certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json
      - --accesslog
      - --log
      - --log.level=DEBUG
    ports:
      - "${HTTP_PORT}:80"
      - "${HTTPS_PORT}:443"
      - "${TRAEFIK_DASHBOARD_PORT}:8080"
    networks:
      - frontend-network
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./src/traefik/acme.json:/letsencrypt/acme.json"

  postgres:
    image: postgres:14
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    networks:
      - backend-network
    volumes:
      - postgres_data:/var/lib/postgresql/data

  rabbitmq:
    image: "rabbitmq:3-management"
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - backend-network

  redis:
    image: "redis:7.4"
    ports:
      - "6379:6379"
    networks:
      - backend-network

  migration:
    build:
      context: ./
      dockerfile: ./src/migration/Dockerfile
    deploy:
      restart_policy:
        condition: none
    depends_on:
      - postgres
    networks:
      - backend-network
    volumes:
      - ./src/common:/app/common
    environment:
      SQLALCHEMY_CONNECTION_STRING: ${SQLALCHEMY_CONNECTION_STRING}

  worker:
    build: 
      context: ./
      dockerfile: ./src/worker/Dockerfile
      target: development
    depends_on:
      - rabbitmq
      - redis
      - postgres
      - migration
    ports:
      - "5679:5679"
    networks:
      - backend-network
    volumes:
      - ./src/worker:/app/worker
      - ./src/common:/app/common
      - shared_files:/app/shared_files
    environment:
      DEBUG_WORKER: ${DEBUG_WORKER}
      DEBUG_WAIT: ${DEBUG_WAIT}
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
      CELERY_BACKEND_URL: ${CELERY_BACKEND_URL}
      SHARED_FILES_PATH: ${SHARED_FILES_PATH}
      SQLALCHEMY_CONNECTION_STRING: ${SQLALCHEMY_CONNECTION_STRING}

  worker-beat:
    build: 
      context: ./
      dockerfile: ./src/worker/Dockerfile
      target: development-beat
    depends_on:
      - rabbitmq
      - redis
      - postgres
      - migration
    networks:
      - backend-network
    volumes:
      - ./src/worker:/app/worker
      - ./src/common:/app/common
      - shared_files:/app/shared_files
    environment:
      DEBUG_WORKER: ${DEBUG_WORKER}
      DEBUG_WAIT: ${DEBUG_WAIT}
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
      CELERY_BACKEND_URL: ${CELERY_BACKEND_URL}
      SHARED_FILES_PATH: ${SHARED_FILES_PATH}
      SQLALCHEMY_CONNECTION_STRING: ${SQLALCHEMY_CONNECTION_STRING}

  api:
    build:
      context: ./
      dockerfile: ./src/api/Dockerfile
      target: development
    depends_on:
      - postgres
      - migration
      - worker
    ports:
      - "5678:5678"
      - "8000:8000"
    networks:
      - frontend-network
      - backend-network
    volumes:
      - ./src/api:/app/api
      - ./src/common:/app/common
      - shared_files:/app/shared_files
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.api.loadbalancer.server.port=8000"
      - "traefik.http.middlewares.api-stripprefix.stripprefix.prefixes=/${PROJECT_NAME}${API_URL_PREFIX}"
      - "traefik.http.routers.api-https.rule=Host(`${HOSTNAME}`) && PathPrefix(`/${PROJECT_NAME}`)"
      - "traefik.http.routers.api-https.entrypoints=websecure"
      - "traefik.http.routers.api-https.tls=true"
      - "traefik.http.routers.api-https.tls.certresolver=myresolver"
      - "traefik.http.routers.api-https.middlewares=api-stripprefix"
    environment:
      DEBUG_API: ${DEBUG_API}
      DEBUG_WAIT: ${DEBUG_WAIT}
      PROJECT_NAME: ${PROJECT_NAME}
      API_URL_PREFIX: ${API_URL_PREFIX}
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
      CELERY_BACKEND_URL: ${CELERY_BACKEND_URL}
      SHARED_FILES_PATH: ${SHARED_FILES_PATH}
      SQLALCHEMY_CONNECTION_STRING: ${SQLALCHEMY_CONNECTION_STRING}

networks:
  frontend-network:
  backend-network:

volumes:
  shared_files:
  postgres_data: